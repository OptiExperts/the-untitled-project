{%- comment -%}
{
  "pack_name": "Blog fluid grid",
  "pack_author": "Design Packs",
  "pack_version": "1.0.0",
  "pack_folder": "section",
  "pack_type": "dynamic",
  "pack_tags": [],
  "pack_description": ""
}
{%- endcomment -%}

{% comment %} Security Code - hides section when app uninstalled {% endcomment %}
{%- unless content_for_header contains 'design_packs_file.js' -%}
  {%- if request.design_mode -%}
    <div class="dsgn-pck__no-app-warning">
      <div class="dsgn-pck__no-app-warning-background">
      </div>
      <div class="dsgn-pck__no-app-warning-text dsgn-pck__rte">
        <p><strong>WARNING!</strong> This section or template will not display properly without the <a href="https://apps.shopify.com/design-packs" target="_blank" rel="nofollow">Design Packs</a> app installed. Please email <a href="mailto:info@design-packs.com" target="_blank">info@design-packs.com</a> with any questions.</p>
      </div>
    </div>
  {%- endif -%}
  {%- break -%}
{%- endunless-%}

{%- comment -%} Color: check if color is set to transparent {%- endcomment -%}
{%- assign text_background_alpha = section.settings.text_background_color | color_extract: 'alpha' -%}
{%- assign background_alpha = section.settings.background_color | color_extract: 'alpha' -%}

{%- comment -%} Images: check image crop aspect ratio {%- endcomment -%}
{%- assign image_crop_width = section.settings.image_crop | split: ':' | first | times: 1000 -%}
{%- assign image_crop_height = section.settings.image_crop | split: ':' | last | times: 1000 -%}

{%- comment -%} Layout: has user entered measurement value into max-width field? {%- endcomment -%}
{%- if section.settings.max_width contains 'px' or section.settings.max_width contains '%' -%}
  {%- assign max_width = section.settings.max_width -%}
{%- else -%}
  {%- assign max_width = section.settings.max_width | append: 'px' -%}
{%- endif -%}

{%- comment -%} Text: custom font_picker values {%- endcomment -%}
{%- capture font_settings_list -%}
{{ section.settings.main_font | font_face: font_display: 'block' }}~
{{ section.settings.main_font | font_modify: 'weight', 'bolder' | font_face: font_display: 'block' }}~
{{ section.settings.main_font | font_modify: 'style', 'italic' | font_face: font_display: 'block' }}~
{{ section.settings.main_font | font_modify: 'style', 'italic' | font_modify: 'weight', 'bolder' | font_face: font_display: 'block' }}~
{{ section.settings.heading_font | font_face: font_display: 'swap' }}~
{{ section.settings.heading_font | font_modify: 'weight', 'normal' | font_face: font_display: 'swap' }}~
{{ section.settings.heading_font | font_modify: 'style', 'italic' | font_face: font_display: 'swap' }}~
{{ section.settings.heading_font | font_modify: 'style', 'italic' | font_modify: 'weight', 'bolder' | font_face: font_display: 'swap' }}
{%- endcapture -%}
{%- assign font_array = font_settings_list | split: '~' -%}

{%- comment -%} CSS {%- endcomment -%}
<style>
{%- if section.settings.override_theme_font != blank -%}
  {%- for font in font_array -%}
    {%- unless font contains 'error' -%}{{ font }}{%- endunless -%}
  {%- endfor -%}
  {%- capture main_font -%}{{ section.settings.main_font.family }}, {{ section.settings.main_font.fallback_families }}{%- endcapture -%}
  {%- capture heading_font -%}{{ section.settings.heading_font.family }}, {{ section.settings.heading_font.fallback_families }}{%- endcapture -%}
{%- endif -%}

#DP--{{ section.id }} {
  background-color: {%- if background_alpha != 0 -%}{{ section.settings.background_color }}{%- endif -%};
  --gutter: 30px;
}

#DP--{{ section.id }} .dsgn-pck__page-header {
  padding-bottom: 2rem;
}

#DP--{{ section.id }} .dsgn-pck__header {
  font-size: clamp(16px, {{ section.settings.text_size | times: 0.035 }}em, 62px);
  text-align: center;
  color: {{ section.settings.text_color }};
  {%- if section.settings.override_theme_font != blank -%}
  font-family: {{ heading_font }};
  font-weight: {{ section.settings.heading_font.weight }};
  font-style: {{ section.settings.heading_font.style }};
  {%- endif -%}
}

#DP--{{ section.id }} .dsgn-pck__blog-filter {
  padding-top: 1.5rem 10px 0;
  max-width: 400px;
  text-align: center;
  margin: 0px auto 40px;
  display: flex;
  flex-wrap: wrap;
  font-size: clamp(16px, {{ section.settings.text_size | times: 0.006 }}em, 62px);
  {%- if section.settings.override_theme_font != blank -%}
  font-family: {{ main_font }};
  font-weight: {{ section.settings.main_font.weight }};
  font-style: {{ section.settings.main_font.style }};
  {%- endif -%}
}

#DP--{{ section.id }} .dsgn-pck__blog-filter__label {
  font-weight: bold;
  font-style: italic;
  display: inline-block;
  margin-right: 10px;
  margin-bottom: 0;
}

#DP--{{ section.id }} .dsgn-pck__blog-filter__tag {
  margin: 0 16px;
  font-style: italic;
  text-transform: capitalize;
  margin-bottom: 10px;
  position: relative;
}

#DP--{{ section.id }} .dsgn-pck__blog-filter__tag::after {
  content: '';
  position: absolute;
  width: 0;
  height: 1px;
  bottom: -6px;
  left: 0;
  transition: 0.5s;
  background-color: {{ section.settings.text_color }};
}

#DP--{{ section.id }} .dsgn-pck__blog-filter__tag:hover:after {
  width: 100%;
}

#DP--{{ section.id }} .dsgn-pck__blog-filter__tag--selected::after {
  width: 100%;
}

#DP--{{ section.id }} .dsgn-pck__grid {
  gap: var(--gutter);
  margin-bottom: 80px;
  padding-bottom: 2px;
}

#DP--{{ section.id }} .dsgn-pck__grid-item {
  position: relative;
  height: 100%;
  overflow: hidden;
  cursor: pointer;
  transition: all .5s;
  border-radius: 5px;
  display: flex;
  flex-direction: column;
  background-color: {{ section.settings.article_background_color }};
  border: thin solid {{ section.settings.text_color | color_modify: 'alpha', 0.2 }};
}

#DP--{{ section.id }} .dsgn-pck__grid-item-content {
  padding: 1em;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  flex: 1 0 auto;
}

#DP--{{ section.id }} .dsgn-pck__blog-fade-in__inner-content {
  height: 100%;
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  text-align: center;
  position: relative;
  color: {{ section.settings.text_color }};
}

#DP--{{ section.id }} .dsgn-pck__blog-fade-in__text-content {
  width: 100%;
}

#DP--{{ section.id }} .dsgn-pck__heading {
  text-align: left;
  margin-bottom: 0.5em;
  color: {{ section.settings.text_color }};
  {%- if section.settings.override_theme_font != blank -%}
  font-family: {{ heading_font }};
  font-weight: {{ section.settings.heading_font.weight }};
  font-style: {{ section.settings.heading_font.style }};
  {%- endif -%}
  font-size: clamp(14px, {{ section.settings.text_size | times: 0.015 }}em, 62px);
}

#DP--{{ section.id }} .dsgn-pck__blog-fade-in__author {
  display: inline;
  text-align: left;
  color: {{ section.settings.text_color }};
  {%- if section.settings.override_theme_font != blank -%}
  font-family: {{ main_font }};
  font-weight: {{ section.settings.main_font.weight }};
  font-style: {{ section.settings.main_font.style }};
  {%- endif -%}
  font-size: clamp(12px, {{ section.settings.text_size | times: 0.008 }}em, 36px);
}

#DP--{{ section.id }} .dsgn-pck__blog-fade-in__date {
  display: inline;
  text-align: left;
  color: {{ section.settings.text_color }};
  {%- if section.settings.override_theme_font != blank -%}
  font-family: {{ main_font }};
  font-weight: {{ section.settings.main_font.weight }};
  font-style: {{ section.settings.main_font.style }};
  {%- endif -%}
  font-size: clamp(12px, {{ section.settings.text_size | times: 0.008 }}em, 36px);
}

#DP--{{ section.id }} .dsgn-pck__blog-fade-in__author  + .dsgn-pck__blog-fade-in__date::before {
  content: " | "
}

#DP--{{ section.id }} .dsgn-pck__blog-fade-in__excerpt {
  text-align: left;
  margin-top: 1.5em;
  color: {{ section.settings.text_color }};
  {%- if section.settings.override_theme_font != blank -%}
  font-family: {{ main_font }};
  font-weight: {{ section.settings.main_font.weight }};
  font-style: {{ section.settings.main_font.style }};
  {%- endif -%}
  font-size: clamp(12px, {{ section.settings.text_size | times: 0.01 }}em, 48px);
}

#DP--{{ section.id }} .dsgn-pck__blog-fade-in__upper-area {
  text-decoration: none;
}

#DP--{{ section.id }} .dsgn-pck__blog-fade-in__lower-area {
  display: flex;
  justify-content: space-between;
  align-items: center;
  text-decoration: none;
}

#DP--{{ section.id }} .dsgn-pck__blog-fade-in__lower-area p {
  margin-bottom: 0;
  color: {{ section.settings.text_color }};
  {%- if section.settings.override_theme_font != blank -%}
  font-family: {{ main_font }};
  font-weight: {{ section.settings.main_font.weight }};
  font-style: {{ section.settings.main_font.style }};
  {%- endif -%}
  font-size: clamp(12px, {{ section.settings.text_size | times: 0.01 }}em, 48px);
}

#DP--{{ section.id }} p.dsgn-pck__blog-fade-in__button {
  margin-top: 1.5em;
  display: inline-block;
  text-decoration: none;
  text-transform: uppercase;
  margin-left: auto;
  font-weight: bold;
  position: relative;
}

#DP--{{ section.id }} p.dsgn-pck__blog-fade-in__button:after {
  content: '';
  display: block;
  position: absolute;
  height: 1px;
  background: black;
  top: 100%;
  left: 0;
  width: 0;
  transition: width 0.3s ease-out;
}

#DP--{{ section.id }} p.dsgn-pck__blog-fade-in__button:hover:after {
  width: 100%;
}

#DP--{{ section.id }} .dsgn-pck__pagination {
  text-align: center;
  margin-top: 1.5rem;
  margin-bottom: 3em;
  {%- if section.settings.override_theme_font != blank -%}
  font-family: {{ main_font }};
  font-weight: {{ section.settings.main_font.weight }};
  font-style: {{ section.settings.main_font.style }};
  {%- endif -%}
  font-size: clamp(12px, {{ section.settings.text_size | times: 0.008 }}em, 48px);
}

#DP--{{ section.id }} .dsgn-pck__pagination .page {
  padding: 0.5em 1em;
  margin: 0 auto;
  transition: 0.3s;
  display: inline-block;
  border-bottom: 1px solid transparent;
}

#DP--{{ section.id }} .dsgn-pck__pagination .page:hover {
  border-bottom: 1px solid;
  font-style: italic;
}

#DP--{{ section.id }} .dsgn-pck__pagination .prev,
#DP--{{ section.id }} .dsgn-pck__pagination .next {
  padding: 0.5em 1em;
}

#DP--{{ section.id }} .dsgn-pck__pagination .prev a,
#DP--{{ section.id }} .dsgn-pck__pagination .next a,
#DP--{{ section.id }} .dsgn-pck__pagination .page a {
  text-decoration: none;
}

#DP--{{ section.id }} .dsgn-pck__pagination .current {
  border-bottom: 1px solid ;
  font-style: italic;
}

/* Animation */
{%- if section.settings.animation != 'none' -%}
  #DP--{{ section.id }} .dsgn-pck__grid.dsgn-pck__animation-applied [style*="--dsgn-pck-animate"] {
    animation-name: dsgn-pck__animation--{{ section.settings.animation }};
  }
{%- else -%}
  #DP--{{ section.id }} [style*="--dsgn-pck-animate"] {
    opacity: 1;
  }
{% endif %}

#DP--{{ section.id }} .dsgn-pck__sizer {
  padding-top: {{ section.settings.inner_padding }}px;
  padding-bottom: {{ section.settings.inner_padding }}px;
  width: {{ section.settings.base_width }}%;
  max-width: {{ max_width }};
}

{%- if section.settings.custom_css != blank -%}
  {%- assign custom_section_declarations = section.settings.custom_css | split: '}' -%}
  {%- for declaration in custom_section_declarations -%}
    {%- if declaration contains '{' -%}
      #DP--{{ section.id }} {{ declaration }} }
    {%- endif -%}
  {%- endfor -%}
{%- endif -%}

/* Large desktop */
@media (min-width: 1200px) {

}

/* Portrait tablet to landscape and desktop */
@media (min-width: 768px) and (max-width: 979px) {

}

/* Landscape phone to portrait tablet */
@media (max-width: 767px) {

}

/* Landscape phones and down */
@media (max-width: 480px) {
  #DP--{{ section.id }} .dsgn-pck__grid {
    grid-template-columns: 1fr;
    grid-template-columns: repeat(auto-fit, minmax(100%, 1fr));
  }

  #DP--{{ section.id }} .dsgn-pack__tag-filter {
    grid-column: span 1;
  }

  #DP--{{ section.id }} .dsgn-pck__sizer {
    min-width: 70%;
    padding-top: {{ section.settings.inner_padding | divided_by: 2 }}px;
    padding-bottom: {{ section.settings.inner_padding | divided_by: 2 }}px;
  }

  {%- if section.settings.mobile_custom_css != blank -%}
    {%- assign mobile_custom_declarations = section.settings.mobile_custom_css | split: '}' -%}
    {%- for declaration in mobile_custom_declarations -%}
      {%- if declaration contains '{' -%}
        #DP--{{ section.id }} {{ declaration }} }
      {%- endif -%}
    {%- endfor -%}
  {%- endif -%}
}
</style>

{%- comment -%} HTML {%- endcomment -%}
<section id="DP--{{ section.id }}" class="DP--{{ section.id }} dsgn-pck__blog-fade-in dsgn-pck__section">
  <div class="dsgn-pck__sizer">
    <div class="dsgn-pck__blog__page-header dsgn-pck__page-header">
      <h1 class="dsgn-pck__blog__header dsgn-pck__header">{{ page_title }}</h1>
    </div>
    {%- if section.settings.show_tag_filter -%}
      {%- if blog.tags.size > 0 -%}
        <div class="dsgn-pck__blog-filter">
          <a href="{{ blog.url }}" class="dsgn-pck__blog-filter__tag">{{ 'all_topics' | t }}</a>
          {% for tag in blog.all_tags %}
            <a href="{{ blog.url }}/tagged/{{ tag | handleize }}" class="dsgn-pck__blog-filter__tag {% if current_tags contains tag %}dsgn-pck__blog-filter__tag--selected{%- endif -%}">{{ tag }}</a>
          {% endfor %}
        </div>
      {%- endif -%}
    {%- endif -%}

    {% comment %} Grid and paginate variables {% endcomment %}
    {% assign paginate_count = section.settings.blog_posts_per_page %}
    <div class="dsgn-pck__grid dsgn-pck__grid--{{ section.settings.per_row }}-per-row">
    {% paginate blog.articles by paginate_count %}
      {% for article in blog.articles  %}
        {%- comment -%} Images: responsive image sizes {%- endcomment -%}
        {%- capture srcset -%}
          {{ article.image | img_url: '5000x' }} 5000w,
          {{ article.image | img_url: '4500x' }} 4500w,
          {{ article.image | img_url: '4000x' }} 4000w,
          {{ article.image | img_url: '3500x' }} 3500w,
          {{ article.image | img_url: '3000x' }} 3000w,
          {{ article.image | img_url: '2500x' }} 2500w,
          {{ article.image | img_url: '2000x' }} 2000w,
          {{ article.image | img_url: '1800x' }} 1800w,
          {{ article.image | img_url: '1600x' }} 1600w,
          {{ article.image | img_url: '1400x' }} 1400w,
          {{ article.image | img_url: '1200x' }} 1200w,
          {{ article.image | img_url: '1000x' }} 1000w,
          {{ article.image | img_url: '800x' }} 800w,
          {{ article.image | img_url: '600x' }} 600w,
          {{ article.image | img_url: '400x' }} 400w,
          {{ article.image | img_url: '200x' }} 200w
        {%- endcapture -%}

        <div class="dsgn-pck__grid-item dsgn-pck__block-{{ article.id }}"
          style="--dsgn-pck-animate: {{ forloop.index }};">
          <a href="{{ article.url }}">
            <div class="dsgn-pck__image__wrapper">
              <svg viewBox="0 0 {{ image_crop_width }} {{ image_crop_height }}"></svg>
              {%- if article.image != blank -%}
                <picture>
                  <img src="{{ article.image | img_url: '600x' }}"
                      srcset="{{ srcset }}"
                      sizes="(min-width: 480px) 50vw, 100vw"
                      alt="{{ article.image.alt }}"
                      loading="lazy"
                      height="{{ article.image.height }}"
                      width="{{ article.image.width }}">
                </picture>
              {%- endif -%}
            </div>
          </a>
          <div class="dsgn-pck__grid-item-content">
            <a href="{{ article.url }}" class="dsgn-pck__blog-fade-in__upper-area">
              <h3 class="dsgn-pck__blog-fade-in__heading dsgn-pck__heading">{{ article.title }}</h3>
              {%- if section.settings.show_author -%}
                <p class="dsgn-pck__blog-fade-in__author">{{ 'by' | t }} {{ article.author }}</p>
              {%- endif -%}
              {%- if section.settings.show_date -%}
                <p class="dsgn-pck__blog-fade-in__date">{{ article.published_at | date: "%b %d, %Y" }}</p>
              {%- endif -%}
              {%- if section.settings.show_excerpt -%}
                <p class="dsgn-pck__blog-fade-in__excerpt">{{ article.excerpt_or_content | strip_html | truncatewords: 15, '...'}}</p>
              {%- endif -%}
            </a>
            {%- if section.settings.show_read_more -%}
              <a href="{{ article.url }}" class="dsgn-pck__blog-fade-in__lower-area">
                {%- if section.settings.show_read_more -%}
                  <p class="dsgn-pck__blog-fade-in__button">{{ 'read_more' | t }}</p>
                {%- endif -%}
              </a>
            {%- endif -%}
          </div>
        </div>
      {%- endfor -%}
    </div>
      {% if paginate.pages > 1 %}
        <div class="dsgn-pck__pagination">
          {{ paginate | default_pagination | replace: '&laquo; Previous', '&larr;' | replace: 'Next &raquo;', '&rarr;' }}
        </div>
      {% endif %}
    {% endpaginate %}

  </div>

</section>

{%- schema -%}
  {
    "name": "Blog - fade in",
    "class": "DP__blog-fade-in",
    "templates": ["blog"],
    "settings": [
      {
        "type": "select",
        "id": "animation",
        "label": "Animation",
        "default": "fade-in-up",
        "options": [
          {
            "value": "fade-in",
            "label": "Fade-in"
          },
          {
            "value": "fade-in-left",
            "label": "Fade-in left"
          },
          {
            "value": "fade-in-right",
            "label": "Fade-in right"
          },
          {
            "value": "fade-in-down",
            "label": "Fade-in down"
          },
          {
            "value": "fade-in-up",
            "label": "Fade-in up"
          }
        ]
      },
      {
        "type": "header",
        "content": "Blog posts grid"
      },
      {
        "type": "range",
        "id": "per_row",
        "label": "Posts per row",
        "min": 2,
        "max": 4,
        "step": 1,
        "default": 3
      },
      {
        "type": "range",
        "id": "blog_posts_per_page",
        "label": "Posts per page",
        "min": 1,
        "max": 25,
        "step": 1,
        "default": 6
      },
      {
        "type": "select",
        "id": "image_crop",
        "label": "Image aspect ratio",
        "default": "1:1",
        "options": [
          {
            "value": "4:3",
            "label": "Landscape (4:3)"
          },
          {
            "value": "2:3",
            "label": "Portrait (2:3)"
          },
          {
            "value": "1:1",
            "label": "Square (1:1)"
          },
          {
            "value": "none",
            "label": "Original"
          }
        ]
      },
      {
        "type": "checkbox",
        "id": "show_tag_filter",
        "label": "Show tag filter"
      },
      {
        "type": "header",
        "content": "Blog posts"
      },
      {
        "type": "checkbox",
        "id": "show_date",
        "label": "Show date",
        "default": true
      },
      {
        "type": "checkbox",
        "id": "show_author",
        "label": "Show author",
        "default": true
      },
      {
        "type": "checkbox",
        "id": "show_excerpt",
        "label": "Show excerpt",
        "default": true
      },
      {
        "type": "checkbox",
        "id": "show_read_more",
        "label": "Show read more",
        "default": true
      },
      {
        "type": "header",
        "content": "✏️ Text appearance"
      },
      {
        "type": "range",
        "id": "text_size",
        "label": "Text size",
        "min": 80,
        "max": 150,
        "step": 5,
        "default": 100,
        "unit": "%"
      },
      {
        "type": "checkbox",
        "id": "override_theme_font",
        "label": "Override default theme font",
        "default": true
      },
      {
        "type": "font_picker",
        "id": "heading_font",
        "label": "Headings",
        "default": "serif"
      },
      {
        "type": "font_picker",
        "id": "main_font",
        "label": "Text",
        "default": "sans-serif"
      },
      {
        "type": "header",
        "content": "🎨 Design"
      },
      {
        "type": "color",
        "id": "text_color",
        "label": "Text",
        "default": "#3A3A3A"
      },
      {
        "type": "color",
        "id": "background_color",
        "label": "Background",
        "default": "#E8E7E7"
      },
      {
        "type": "color",
        "id": "article_background_color",
        "label": "Article background",
        "default": "#FFFFFF"
      },
      {
        "type": "header",
        "content": "🖼 Layout"
      },
      {
        "type": "range",
        "id": "base_width",
        "label": "Size",
        "min": 60,
        "max": 100,
        "step": 5,
        "default": 95,
        "unit": "%"
      },
      {
        "type": "text",
        "id": "max_width",
        "label": "Maximum width",
        "placeholder": "eg. 1200px",
        "info": "Sets width constraint for content.",
        "default": "1000"
      },
      {
        "type": "range",
        "id": "inner_padding",
        "label": "Inner padding",
        "info": "Only applies to top and bottom.",
        "min": 0,
        "max": 100,
        "default": 40,
        "step": 5,
        "unit": "px"
      },
      {
        "type": "header",
        "content": "🚨 Advanced"
      },
      {
        "type": "textarea",
        "id": "custom_css",
        "label": "CSS"
      },
      {
        "type": "textarea",
        "id": "mobile_custom_css",
        "label": "Mobile CSS",
        "info": "Applied on screens less than 480px."
      }
    ],
    "locales": {
      "en": {
        "read_more": "Read more",
        "by": "By",
        "filter_by": "Filter by",
        "all_topics": "All"
      }
    }
  }
{%- endschema -%}

{%- comment -%} JSON Settings {%- endcomment -%}
<script type="application/json" data-dsgn-pck="{{section.id}}">
  {
    "id": {{ section.id | json }},
    "animation": {{ section.settings.animation | json }}
  }
</script>
{%- comment -%} JavaScript {%- endcomment -%}
<script data-dsgn-pck-js="{{section.id}}">
(function(){
  'use strict';

  const designPack = {
    settings: {
    },
    animateSection: function(entries, observer){
      // Target the first entry available.
      let observedSection = entries[0];

      if (observedSection.isIntersecting) {
        observedSection.target.classList.add('dsgn-pck__animation-applied');
      }
    },
    load: function (section) {
      if (this.settings.animation !== 'none'){
        const options = {
          root: null,
          rootMargin: '0px',
          threshold: 0
        };
        // Construct Intersection Observer.
        const observer = new IntersectionObserver( this.animateSection, options );

        // Observe if element is present.
        if (section) {
          observer.observe(section);
        }
      }
    },
    unload: function (section) {
      section.classList.remove('dsgn-pck__animation-applied')
    }
  }

  window.addEventListener('shopify:section:unload', function (e) {
    const settings = document.querySelector(`[data-dsgn-pck="${e.detail.sectionId}"]`);
    const sectionId = e.detail.sectionId;
    const section = document.querySelector(`#DP--${e.detail.sectionId}`);
    if (sectionId == designPack.settings.id){
      designPack.unload(section);
    }
  });

  designPack.settings = JSON.parse(document.querySelector('[data-dsgn-pck="{{section.id}}"]').innerHTML);
  const sectionId = {{ section.id | json }};
  const sections = document.querySelectorAll(`#DP--${sectionId} .dsgn-pck__grid`);

  sections.forEach((section) => {
    if (sectionId == designPack.settings.id){
      designPack.load(section);
    }
  })

})();
</script>
